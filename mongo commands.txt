cd C:\Program Files\MongoDB\Server\3.4\bin

mongoimport --drop -d students -c grades E://mongodb/homework/hw2/grades.json

E:\mongodb\final\7\final7\
https://docs.mongodb.com/manual/reference/mongo-shell/
https://docs.mongodb.com/manual/reference/operator/

show dbs

db.copyDatabase("students", "back_students")

#drop a db
use students
db.dropDatabase()

#find
db.users.find().pretty()
#filter
db.find({"title": "Jaws"}).pretty()
#filter on a single in a array
db.movieDetails.find({"tomato.meter" : 100}).pretty()
#exact array match
db.movieDetails.find({"writers" : ["Ethan Coen", "Joel Coen"]}).count()
#postion in array
db.movieDetails.find({"actors.0" : "Jeff Bridges"}).count()

db.posts.insertOne({ "title": "Jaws", "body":"x", "post_date":"x","permalink":"x", "tags":"x", "author":"x", "comments":"x"}):

# find the 101 highest value
db.grades.find().sort( { 'score' : -1 } ).skip( 100 ).limit( 1 )

# list out the 1st 5 students values in a 2 column list
db.grades.find( { }, { 'student_id' : 1, 'type' : 1, 'score' : 1, '_id' : 0 } ).sort( { 'student_id' : 1, 'score' : 1 } ).limit( 5 )

#find the student with the highest average
db.grades.aggregate( { '$group' : { '_id' : '$student_id', 'average' : { $avg : '$score' } } }, { '$sort' : { 'average' : -1 } }, { '$limit' : 1 } )

#filter for an agg & unwind array & sort it
> db.students.aggregate([{$match:{_id:137}}, {$unwind:"$scores"}, {$sort:{"scores.score":1}}]).pretty()

#projections, only show title, exclude _id
db.movieDetails.find({rated : "PG"}, {title:1, _id:0}).pretty()

#aggregation
db.grades.aggregate({'$group':{'_id':'$student_id', 'average':{$avg:'$score'}}}, {'$sort':{'average':-1}}, {'$limit':1})

#join 2 collections together, count the null values
> db.kittens.aggregate([{$lookup:{from :"album_images",localField:"_id", foreignField:"_id", as : "Join"}}, 
{$match:{Join:{$eq:[]}}}, 
{$group:{_id:null, cnt:{"$sum":1}}}])

#quering
# greater than
db.movieDetails.find({ runtime: { $gt: 90 } }).count()
#between
db.movieDetails.find({ runtime: { $gt: 90, $lt: 120 } }).count()
#mutliple fields
db.movieDetails.find({ "tomato.meter": { $gte: 95 }, runtime: { $gt: 180 } })
#not equal
db.movieDetails.find({ rated: { $ne: "UNRATED" } }).count()
#in list
db.movieDetails.find({ rated: { $in: ["G", "PG"] } }).pretty()

#logical tests
# does a field exist?
db.moviesDetails.find({ "tomato.meter": { $exists: true } })
# whats the data type?
db.moviesScratch.find({ _id: { $type: "string" } })

#regex
db.movieDetails.find({ "awards.text": { $regex: /^Won.*/ } },
                     { title: 1, "awards": 1, _id: 0}).pretty()

#make a unique index
db.students.createIndex({"student_id":1,"class_id":1 }, {"unique":true})
					 
#sort a return
db.movieDetails.find().sort({student_id:1, score:-1})

#2d geo search
db.places.find( { location : { $near : [74,140] } }).limit(3)

#3d geo search
db.stores.find({ loc:{ $near: { $geometry: { type: "Point", coordinates: [-130, 39]}, $maxDistance:1000000 } } })

#full string text search, words treated as OR
db.movies.ensureIndex({'title':'text'})
 db.movies.find( { $text : { $search : "Big Lebowski" } } )
 
	# field ns has the text. 
	db.sysprofile.ensureIndex({'ns':'text'})
	db.sysprofile.find({$text:{$search: "school2"}},{"_id":-1, "millis":1}).sort({"millis":-1}).pretty()
 
 #profiling, the system log for everything over 1 sec, sorted desc
 db.system.profile.find( { millis : { $gt:1000 } } ).sort( { ts : -1 } )
 
 #agg query
 db.products.aggregate([{$group:{"_id":"$category", "num_products":{"$sum":1}}}])
 
 #grouped agg
 db.stuff.aggregate([{$group:
             {_id:
              {'moe':'$a',
               'larry':'$b',
               'curly':'$c'
              }
             }
            }])
			
# sum pop by state
db.zips.aggregate([{"$group":{"_id":"$state", "population":{$sum:"$pop"}}}])	
#avg pop by state
db.zips.aggregate([{"$group":{"_id":"$state","average_pop":{"$avg":"$pop"} }}])	
#create an array of unique values
db.zips.aggregate([{"$group":{"_id":"$city", "postal_codes":{"$addToSet":"$_id"}}}])
#create an array of values
db.zips.aggregate([{"$group":{"_id":"$city", "postal_codes":{"$push":"$_id"}}}])
#max by state
db.zips.aggregate([{"$group":{"_id":"$state", pop:{"$max":"$pop"}}}])
# grouping into a grouping
db.fun.aggregate([{$group:{_id:{a:"$a", b:"$b"}, c:{$max:"$c"}}}, {$group:{_id:"$_id.a", c:{$min:"$c"}}}])

#project
db.zips.aggregate([{$project:{_id:0, city:{$toLower:"$city"}, pop:1, state:1, zip:"$_id"}}])
#complex project
db.products.aggregate([{$project:
     {	 _id:0,
	 'maker': {$toLower:"$manufacturer"},
	 'details': {'category': "$category",
		     'price' : {"$multiply":["$price",10]}
		    },
	 'item':'$name'
     }    }])
	 
# filter, sum & reshape
db.zips.aggregate([
    {$match:     {	 state:"NY"     }    },
    {$group:     {	 _id: "$city",	 population: {$sum:"$pop"},	 zip_codes: {$addToSet: "$_id"}     }    },
    {$project:    {	 _id: 0,	 city: "$_id",	 population: 1,	 zip_codes:1     }    }   
])

#filter on value
db.zips.aggregate([{$match:{pop:{$gt:100000}}}])

#filter on many 
db.zips.aggregate([{"$match":{"$or":[{state:"CT", pop:{"$gt":25000}},{state:"NJ", pop:{"$gt":25000}}]}}
	,{"$group":{"_id":null, "avg":{"$avg":"$pop"}}} ])

#text search & order returns, just words
db.sentences.aggregate([{$match : {$text: {$search: "tree rat"}}},
{$sort:{score:{$meta: "textScore"}}},
{$project:{words:1, _id:0}}])

#filter, sum pop, reshape & sort desc
db.zips.aggregate([
    {$match:     {	 state:"NY"     }    },
    {$group:     {	 _id: "$city",	 population: {$sum:"$pop"},     }    },
    {$project:     {	 _id: 0,	 city: "$_id",	 population: 1,     }    },
    {$sort:     {	 population:-1     }    }
      ])
					 
#multiple sorts
db.zips.aggregate([{$sort:{state:1, city:1}}])		

#skip and limit
db.zips.aggregate([
    {$match:     {	 state:"NY"     }    },
    {$group:     {	 _id: "$city",	 population: {$sum:"$pop"},     }    },
    {$project:     {	 _id: 0,	 city: "$_id",	 population: 1,     }    },
    {$sort:     {	 population:-1     }    },
    {$skip: 10},
    {$limit: 5}])
			 
# find the largest pop in each state, sort result
db.zips.aggregate([
	 /* get the population of every city in every state */
		{$group:     {	 _id: {state:"$state", city:"$city"},	 population: {$sum:"$pop"},     }    },
	 /* sort by state, population */
		{$sort:      {"_id.state":1, "population":-1}    },
	 /* group by state, get the first item in each group */
		{$group:      {	 _id:"$_id.state",	 city: {$first: "$_id.city"},	 population: {$first:"$population"}     }    },
	 /* now sort by state again */
		{$sort:     {"_id":1}    }])
		
#unwind exmaple
db.items.insert({_id:'rock', 'attributes':['heavy', 'rough', 'roundish']});
db.items.aggregate([{$unwind:"$attributes"}]);
#- 3 rows returned

#find the highest poster
db.posts.aggregate([{"$unwind":"$comments"}, 
	{"$group":{"_id":"$comments.author", "count":{"$sum":1}}},
	{"$sort":{"count":-1} }])
	
#substring match and sum the population
db.zips.aggregate([{$project:{pop:1, first_char:{$substr:["$city",0,1]}}},
	{$match:{first_char:{$in:["B", "D","O","G","N","M"]}}},
	{$group:{_id:null, tot:{"$sum":"$pop"}}}])

# find the top 10 tags and display the list
db.posts.aggregate([
    /* unwind by tags */
		{"$unwind":"$tags"},
    /* now group by tags, counting each tag */
		{"$group":      {"_id":"$tags",      "count":{$sum:1}     }    },
    /* sort by popularity */
		{"$sort":{"count":-1}},
	/* show me the top 10 */
		{"$limit": 10},
    /* change the name of _id to be tag */
		{"$project":     {_id:0,      'tag':'$_id',      'count' : 1     }    }    ])
		
#double unwind
db.inventory.insert({'name':"T-Shirt", 'sizes':["Small", "Medium", "Large", "X-Large"], 'colors':['navy', "black",  'orange', 'red']})
db.inventory.insert({'name':"Chino Pants", 'sizes':["32x32", "31x30", "36x32"], 'colors':['navy', 'white', 'orange', 'violet']})
db.inventory.aggregate([
    {$unwind: "$sizes"},
    {$unwind: "$colors"},
    {$group:     {	'_id': {'size':'$sizes', 'color':'$colors'},	'count' : {'$sum':1}     }    }])
	
# reversing
db.inventory.aggregate([
    {$unwind: "$sizes"},
    {$unwind: "$colors"},
    {$group:      {	'_id': "$name",	 'sizes': {$addToSet: "$sizes"},	 'colors': {$addToSet: "$colors"},     }    }])
	
# unwind the array scores, find the stedent avg, then the class avg and sort
db.grades.aggregate([{"$unwind":"$scores"},
	{"$match":{"scores.type":{"$ne":"quiz"}}},
	{"$group":{_id:{stud:"$student_id", class:"$class_id"},avg:{"$avg":"$scores.score"}}},
	{"$group":{_id:"$_id.class", class_avg:{"$avg":"$avg"}}},
	{"$sort":{class_avg:-1}}])

# making a collection 
db.games.aggregate([{$group{_id:{first_name:"$first_name", last_name:"$last_name"}, points:{$sum:"$points}}}, 
{$out:summary_results}])

#explain
db.games.aggregate([{$group{_id:{first_name:"$first_name", last_name:"$last_name"}, points:{$sum:"$points}}}], {explain:true})
					 
#change dbs
use video;
# insert that db
db.movies.insertOne({ "title": "Jaws", "year": 1975, "imdb": "tt0073195" });

#insert many, skip existing
db.l2.insertMany(
    [
        {
	    "_id" : "tt0084726",
	    "title" : "Star Trek II: The Wrath of Khan",
	    "year" : 1982,
	    "type" : "movie"
        },
        {
	    "_id" : "tt0117731",
	    "title" : "Star Trek: First Contact",
	    "year" : 1996,
	    "type" : "movie"
        }
    ],
    {
        "ordered": false 
    }
);

#insert fields in doc
db.movieDetails.updateOne({title: "The Martian"},
                          { $inc: { "tomato.reviews": 3, "tomato.userReviews": 25 } })

#updating in array, put at the start to preserve last 5
db.movieDetails.updateOne({ title: "The Martian" },
                          {$push: { reviews:
                                    { $each: [
                                        { rating: 0.5,
                                          date: ISODate("2016-01-13T07:00:00Z"),
                                          reviewer: "Shannon B.",
                                          text: "Enjoyed watching with my kids!" } ],
                                      $position: 0,
                                      $slice: 5 } } } )
									  
# find a doc, add a value to a nested array
db.messages.update({"headers.Message-ID":"<8147308.1075851042335.JavaMail.evans@thyme>"},{$push:{"headers.To":"mrpotatohead@mongodb.com"}})